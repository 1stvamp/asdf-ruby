#!/usr/bin/env sh

install_ruby() {
  local install_type=$1
  local version=$2
  local install_path=$3
  local source_path=$(get_download_file_path $install_type $version)

  download_source $install_type $version

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd $(dirname $source_path)
    tar zxf $source_path || exit 1
    cd $(untar_path $install_type $version)

    local configure_options="$(os_based_configure_options) --prefix=$install_path"

    ./configure $configure_options || exit 1
    make || exit 1
    make install || exit 1
  )
}


os_based_configure_options() {
  local operating_system=$(uname -a)
  local configure_options=""

  if [[ "$operating_system" =~ "Darwin" ]]; then
    if [ "$ASDF_OPENSSL_PATH" = "" ]; then
      local openssl_path=$(brew --prefix openssl 2>/dev/null)
    else
      local openssl_path=$ASDF_OPENSSL_PATH
    fi

    local readline_path=$(brew --prefix readline 2>/dev/null)
    local libyaml_path=$(brew --prefix libyaml 2>/dev/null)
  else
    local openssl_path=/usr
    local openssl_path=/usr
    local libyaml_path=/usr
  fi


  if [ "$openssl_path" = "" ]; then
    echo "WARNING: you don't have openssl installed"
  else
    configure_options="--with-openssl-dir=$openssl_path"
  fi

  if [ "$libyaml_path" = "" ]; then
    echo "WARNING: you don't have libyaml installed"
  else
    configure_options="$configure_options --with-libyaml-dir=$libyaml_path"
  fi

  if [ "$readline_path" = "" ]; then
    echo "WARNING: you don't have readline installed"
  else
    configure_options="$configure_options --with-readline-dir=$readline_path"
  fi

  echo $configure_options
}


download_source() {
  local install_type=$1
  local version=$2
  local download_path=$(get_download_file_path $install_type $version)
  local download_url=$(get_download_url $install_type $version)

  curl -Lo $download_path -C - $download_url
}


get_download_file_path() {
  local install_type=$1
  local version=$2

  local ruby_type=$(get_ruby_type $version)
  local ruby_version=$(get_ruby_version $version)

  if [ "${ruby_type}" = "ruby" ]; then
    local pkg_name="ruby-${ruby_version}.tar.gz"
  elif [ "${ruby_type}" = "jruby" ]; then
    echo "TODO FOR JRUBY"
    echo "TODO FOR JRUBY"
  fi

  echo "$TMPDIR$pkg_name"
}


untar_path() {
  local install_type=$1
  local version=$2

  local ruby_type=$(get_ruby_type $version)
  local ruby_version=$(get_ruby_version $version)

  if [ "${ruby_type}" = "ruby" ]; then
    local dir_name="ruby-${ruby_version}"
  elif [ "${ruby_type}" = "jruby" ]; then
    echo "TODO FOR JRUBY"
    echo "TODO FOR JRUBY"
  fi

  echo "$TMPDIR$dir_name"
}


get_download_url() {
  local install_type=$1
  local version=$2

  local ruby_type=$(get_ruby_type $version)
  local ruby_version=$(get_ruby_version $version)

  if [ "${ruby_type}" = "ruby" ]; then
    local ruby_base_version=$(get_ruby_base_version $ruby_version)
    echo "http://cache.ruby-lang.org/pub/ruby/${ruby_base_version}/ruby-${ruby_version}.tar.gz"
  elif [ "${ruby_type}" = "jruby" ]; then
    echo "TODO FOR JRUBY"
    echo "TODO FOR JRUBY"
  fi
}


get_ruby_base_version() {
  IFS='-' read -a version_info <<< "$1"
  IFS='.' read -a version <<< "${version_info[0]}"

  echo "${version[0]}.${version[1]}"
}


get_ruby_version() {
  IFS='-' read -a version_info <<< "$1"

  if [ "${version_info[0]}" = "jruby" ]; then
    # TODO jruby
    echo "${version_info[1]}-${version_info[2]}"
  else
    # ruby
    if [ "${#version_info[@]}" -eq 1 ]; then
      echo "${version_info[0]}"
    else
      echo "${version_info[0]}-${version_info[1]}"
    fi
  fi
}


get_ruby_type() {
  IFS='-' read -a version_info <<< "$1"
  if [ "${version_info[0]}" = "jruby" ]; then
    echo "jruby"
  else
    echo "ruby"
  fi
}


install_ruby $@
