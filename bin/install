#!/usr/bin/env bash

install_ruby() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d)
  else
    local tmp_download_dir=$TMPDIR
  fi

  # path to the tar file
  local source_path=$(get_download_file_path $install_type $version $tmp_download_dir)

  download_source $install_type $version $source_path

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd $(dirname $source_path)
    tar zxf $source_path || exit 1

    # we use untar path because the extracted dir maybe diff
    # ideally should be using tar with --strip-components 1
    cd $(untar_path $install_type $version $tmp_download_dir)

    local configure_options="$(os_based_configure_options) --prefix=$install_path"

    if [ "$ASDF_PKG_MISSING" != "" ]; then
      echo "WARNING: Might use OS-provided pkgs for the following: $ASDF_PKG_MISSING"
    fi
    unset ASDF_PKG_MISSING #set in os_based_configure_options

    echo "Building with options: $configure_options"

    ./configure $configure_options || exit 1

    make || exit 1
    make install || exit 1
  )
}


homebrew_package_path() {
  local package_name=$1

  if [ "$(brew ls --versions $package_name)" = "" ]; then
    echo ""
  else
    echo "$(brew --prefix openssl)"
  fi
}


exit_if_homebrew_not_installed() {
  if [ "$(brew --version 2>/dev/null)" = "" ]; then
    echo "ERROR: Please install homebrew for OSX"
    exit 1
  fi
}


os_based_configure_options() {
  local operating_system=$(uname -a)
  local configure_options=""

  if [[ "$operating_system" =~ "Darwin" ]]; then

    exit_if_homebrew_not_installed

    local openssl_path=$(homebrew_package_path openssl)
    local readline_path=$(homebrew_package_path readline)
    local libyaml_path=$(homebrew_package_path libyaml)
    local libffi_path=$(homebrew_package_path libffi)
  else
    local openssl_path=/usr
    local readline_path=/usr
    local libyaml_path=/usr
    local libffi_path=/usr
  fi

  if [ "$openssl_path" = "" ]; then
    export ASDF_PKG_MISSING="openssl"
  else
    configure_options="--with-openssl-dir=$openssl_path"
  fi

  if [ "$libyaml_path" = "" ]; then
    export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libyaml"
  else
    configure_options="$configure_options --with-libyaml-dir=$libyaml_path"
  fi

  if [ "$readline_path" = "" ]; then
    export ASDF_PKG_MISSING="$ASDF_PKG_MISSING readline"
  else
    configure_options="$configure_options --with-readline-dir=$readline_path"
  fi

  if [ "$libffi_path" = "" ]; then
    export ASDF_PKG_MISSING="$ASDF_PKG_MISSING libffi"
  fi
  configure_options="$configure_options --enable-sharing"


  echo $configure_options
}


download_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url=$(get_download_url $install_type $version)

  echo $download_path
  curl -Lo $download_path -C - $download_url
}


get_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  local ruby_type=$(get_ruby_type $version)
  local ruby_version=$(get_ruby_version $version)

  if [ "${ruby_type}" = "ruby" ]; then
    local pkg_name="ruby-${ruby_version}.tar.gz"
  fi
  # TODO for jruby
  # elif [ "${ruby_type}" = "jruby" ]; then

  echo "$tmp_download_dir/$pkg_name"
}


untar_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  local ruby_type=$(get_ruby_type $version)
  local ruby_version=$(get_ruby_version $version)

  if [ "${ruby_type}" = "ruby" ]; then
    local dir_name="ruby-${ruby_version}"
  fi

  # TODO for jruby
  # elif [ "${ruby_type}" = "jruby" ]; then

  echo "$tmp_download_dir/$dir_name"
}


get_download_url() {
  local install_type=$1
  local version=$2

  local ruby_type=$(get_ruby_type $version)
  local ruby_version=$(get_ruby_version $version)

  if [ "${ruby_type}" = "ruby" ]; then
    local ruby_base_version=$(get_ruby_base_version $ruby_version)
    echo "http://cache.ruby-lang.org/pub/ruby/${ruby_base_version}/ruby-${ruby_version}.tar.gz"
  fi

  # TODO for jruby
  # elif [ "${ruby_type}" = "jruby" ]; then
}


get_ruby_base_version() {
  IFS='-' read -a version_info <<< "$1"
  IFS='.' read -a version <<< "${version_info[0]}"

  echo "${version[0]}.${version[1]}"
}


get_ruby_version() {
  IFS='-' read -a version_info <<< "$1"

  if [ "${version_info[0]}" = "jruby" ]; then
    # TODO jruby
    echo "${version_info[1]}-${version_info[2]}"
  else
    # ruby
    if [ "${#version_info[@]}" -eq 1 ]; then
      echo "${version_info[0]}"
    else
      echo "${version_info[0]}-${version_info[1]}"
    fi
  fi
}


get_ruby_type() {
  IFS='-' read -a version_info <<< "$1"
  if [ "${version_info[0]}" = "jruby" ]; then
    echo "jruby"
  else
    echo "ruby"
  fi
}


install_ruby $@
